// Read/Write API files
var EDITapiReadFileOrig   = "readfile.php";
var EDITapiSaveFileOrig   = "savefile.php";
if(typeof EDITapiReadFile !== "undefined") { if (EDITapiReadFile ) { EDITapiReadFileOrig = EDITapiReadFile;   } }
if(typeof EDITapiSaveFile !== "undefined") { if (EDITapiSaveFile ) { EDITapiSaveFileOrig = EDITapiSaveFile;   } }

// Check if a sample
EDITflgSample = false;
if (BF.strDomain.indexOf("github.io") > -1 && BF.strUrl.indexOf("/sample") > -1) {
	EDITflgSample = true;
}


// === Override WLIST.AddMoreHints() : custom keywords ===
var WLISTAddMoreHints = function(){};
if(typeof WLISTAddOwnHints !== "undefined") { if (WLISTAddOwnHints ) { WLISTAddMoreHints = WLISTAddOwnHints;  } }

// === Override EDIT.LoadTextOnInit() : load custom text (from file) into the editor ===
var EDITLoadTextOnInit = function(){
	// show "loading" message
	EDIT.initialValue = "Loading the file contents, please wait ...";
	EDIT.editorPref.readOnly = "nocursor";
	EDITLoadTextWait = window.setTimeout(EDITLoadTextWait,500);
	// get file path and name
	EDIT.filePath = BF.GetQsVar("file");
	if (BF.Contains(EDIT.filePath, "/")) {
		EDIT.fileName = BF.AfterLastSplit(EDIT.filePath, "/");
	} else {
		EDIT.fileName = EDIT.filePath;
	}
	document.title = EDIT.fileName + " - Online Code Editor"
	if (EDITflgSample) {
		var strSampleText = "Sample Text";
		for (var i = 0; i < 3 ; i++) {
			strSampleText += " " + strSampleText;
		}
		for (var i = 0; i < 2 ; i++) {
			strSampleText += "\n" + strSampleText;
		}
		window.setTimeout(function(){
			EDIT.codeMirror.setValue(strSampleText);
			EDIT.codeMirror.setOption("readOnly", "");
			EDIT.codeMirror.clearHistory();
			EDIT.codeMirror.focus();
			EDIT.savedValue = EDIT.codeMirror.getValue();
			EDIT.UpdateSave();
		}, 200);
	} else {
		// read the file contents, using HTTP request
		BF.HttpPostRequest(EDITapiReadFileOrig, "path="+encodeURIComponent(EDIT.filePath), function(strResponse){
			// turn off loader
			window.clearTimeout(EDITLoadTextWait);
			EDITLoadTextWait = null;
			window.setTimeout(function(){
				// set the contents
				try {
					var objResponse = JSON.parse(strResponse);
					if (objResponse.status == 1) {
						EDIT.codeMirror.setValue(objResponse.response);
						EDIT.codeMirror.setOption("readOnly", "");
						EDIT.codeMirror.clearHistory();
						EDIT.codeMirror.focus();
					} else {
						EDIT.codeMirror.setValue("*** File not found / Access denied ! ***"+"\n"+"*** Make sure that the file really exists, and look for an alternative way to edit it. ***");
					}
				} catch(e) { EDIT.codeMirror.setValue("*** This file containts binary data. ***"+"\n"+"*** Do not edit this file using the editor !!! ***"); }
				// initialize saved value
				EDIT.savedValue = EDIT.codeMirror.getValue();
				EDIT.UpdateSave();
			}, 50);
		});
	}
};
// (the "loader" function)
var EDITLoadTextWait = function() {
	EDIT.codeMirror.setValue(EDIT.codeMirror.getValue()+".");
	EDITLoadTextWait = window.setTimeout(EDITLoadTextWait,500);
};

// === Override EDIT.Save() : save the modified text (back to the file) ===
var EDITSave = function(){
	if (EDITflgSample) {
		EDIT.savedValue = EDIT.codeMirror.getValue();
		EDIT.UpdateSave();
	} else {
		// save the file contents, using HTTP request
		BF.HttpPostRequest(EDITapiSaveFileOrig, "path="+encodeURIComponent(EDIT.filePath)+"&text="+encodeURIComponent(EDIT.codeMirror.getValue()), function(strResponse){
			var objResponse = JSON.parse(strResponse);
			if (objResponse.status == 1) {
				// save successfully - tell the editor that current value was save and update the save button status
				EDIT.savedValue = EDIT.codeMirror.getValue();
				EDIT.UpdateSave();
			} else {
				// failed - show a message
				alert("Error while saving,"+"\n"+"file was not saved.")
			}
		});
	}
};
